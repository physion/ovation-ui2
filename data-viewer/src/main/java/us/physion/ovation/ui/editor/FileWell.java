package us.physion.ovation.ui.editor;

import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import javax.swing.BorderFactory;

/*
 * Copyright (C) 2014 Physion LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 *
 * @author barry
 */
public class FileWell extends javax.swing.JPanel {


    public static abstract class AbstractDelegate implements PropertyChangeProducer {

        static final String PROP_PROMPT = "prompt";

        private String prompt;
        
        
        public AbstractDelegate(String prompt) {
            this.prompt = prompt;
        }
        
        public abstract void filesDropped(File[] files);

        public String getPrompt() {
            return prompt;
        }

        public void setPrompt(String prompt) {
            String current = prompt;
            this.prompt = prompt;
            propertyChangeSupport.firePropertyChange(PROP_PROMPT, current, prompt);
        }

        private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

        @Override
        public void addPropertyChangeListener(PropertyChangeListener listener) {
            propertyChangeSupport.addPropertyChangeListener(listener);
        }

        @Override
        public void removePropertyChangeListener(PropertyChangeListener listener) {
            propertyChangeSupport.removePropertyChangeListener(listener);
        }

    }

    private AbstractDelegate delegate;
    private FileDrop dropListener;
    private transient final PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    /**
     * Creates new form FileWell
     */
    public FileWell() {
        initComponents();
        initUi();
    }
    
    private void initUi() {
        dropPanel.setBorder(BorderFactory.createDashedBorder(new Color(195, 195, 195), 3, 5, 3, true));

        dropListener = new FileDrop(dropPanelContainer, new FileDrop.Listener() {

            @Override
            public void filesDropped(File[] files) {
                getDelegate().filesDropped(files);
            }
        });
    }
    
    
    /**
     * Get the value of delegate
     *
     * @return the value of delegate
     */
    public AbstractDelegate getDelegate() {
        return delegate;
    }
    
    public static final String PROP_DELEGATE = "delegate";
    
    public void setDelegate(AbstractDelegate newDelegate) {
        AbstractDelegate current = this.delegate;
        this.delegate = newDelegate;
        
        propertyChangeSupport.firePropertyChange("delegate", current, newDelegate);
    }

    /**
     * Add PropertyChangeListener.
     *
     * @param listener
     */
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        if(propertyChangeSupport == null) {
            super.addPropertyChangeListener(listener);
            return;
        }
        
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    /**
     * Remove PropertyChangeListener.
     *
     * @param listener
     */
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dropPanelContainer = new javax.swing.JPanel();
        dropPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(java.awt.Color.white);

        dropPanelContainer.setBackground(javax.swing.UIManager.getDefaults().getColor("EditorPane.background"));
        dropPanelContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dropPanelContainer.setMinimumSize(new java.awt.Dimension(100, 100));

        dropPanel.setBackground(new java.awt.Color(242, 242, 242));
        dropPanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(195, 195, 195));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${delegate.prompt}"), jLabel3, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        dropPanel.add(jLabel3, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout dropPanelContainerLayout = new javax.swing.GroupLayout(dropPanelContainer);
        dropPanelContainer.setLayout(dropPanelContainerLayout);
        dropPanelContainerLayout.setHorizontalGroup(
            dropPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropPanelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );
        dropPanelContainerLayout.setVerticalGroup(
            dropPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropPanelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(dropPanelContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(dropPanelContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dropPanel;
    private javax.swing.JPanel dropPanelContainer;
    private javax.swing.JLabel jLabel3;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
